package com.test.java;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class Ex04_Select {

    public static void main(String[] args) {
        
        //Ex04_Select.java
        //m1();
        //m2();
        //m3();
        //m4();
        //m5();
        m6();
        

    }//

    private static void m6() {
        // insert > select
        //주소록 데이터 입력 > 주소록 명단 출력하기
        
      //UI > 사요자 데이터 입력 + DB 저장
        Scanner scan = new Scanner(System.in);
        
        System.out.println("이름: ");//varchar2 > String
        String name = scan.nextLine();
        
        System.out.println("나이: ");//number > String
        //왜 nextInt가 아닌 nextLine을 사용하는가?
        //java와 sql은 서로 이해가 불가능한 언어 > 자료형도 같지않다.
        String age = scan.nextLine();
        
        System.out.println("성별(m, f): ");
        String gender = scan.nextLine();
        
        System.out.println("전화번호: ");
        String tel = scan.nextLine();

        System.out.println("주소: ");
        String address = scan.nextLine();
        address = address.replace("'", "''"); //길동's > 길동''s
        
        Connection conn = null;
        Statement stat = null;
        DBUtil util = new DBUtil();
        
        try {
            
            conn = util.open();
            stat = conn.createStatement();
            
            String sql = String.format("insert into tblAddress (seq, name, age, gender, tel, address, regdate) values (seqAddress.nextVal, '%s', %s, '%s', '%s', '%s', default)", name, age, gender, tel, address);
            //어차피 결과물을 오라클이 알아들을수 있는'문자', 숫자로 구분하여 입력하기 때문에
            //nextLine으로 받아서 상관없다. -> Oracle과 java는 자료형이 하나도 일치하지않음.
            
            
            //insert into tblAddress (seq, name, age, gender, tel, address, regdate) values                                    (seqAddress.nextVal, '병아리', 1, ',', '010-1234-1234', '서울시 길동's 하우스', default)
            //'(홑따옴표)는 escape가 필요함
            
            System.out.println(sql);
            
            int result = stat.executeUpdate(sql);
            
            System.out.println(result);
            
            stat.close();
            conn.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    private static void m5() {
        // 부서명 입력 > 직원 명단 출력
        
        Scanner scan = new Scanner(System.in);
        DBUtil util = new DBUtil();
        Connection conn = null;
        Statement stat = null;
        ResultSet rs = null;
        
        try {
            
            
            conn = util.open("localhost", "hr", "java1234");
            stat = conn.createStatement();
            
            //부서명 입력
            //> 미리 부서명 가져와서 알려주기
            String sql = "select distinct buseo from tblInsa order by buseo asc";
            
            rs = stat.executeQuery(sql);
            
            System.out.println("보고 싶은 부서명을 입력하세요.");
            
            while (rs.next()) {
                System.out.println("- " + rs.getString("buseo"));
            }
            
            rs.close();//부서명 목록 닫기
            
            System.out.println("부서명: ");
            String buseo = scan.nextLine();
            
            sql = String.format("select name from tblInsa where buseo = '%s' order by name asc", buseo);
            
            rs = stat.executeQuery(sql);
            
            while (rs.next()) {
                System.out.println(rs.getString("name"));
                
            }
            
            rs.close();//직원 명단 목록 닫기
            //stat.close(); //더이상 SQL 실행할 일이 없으면 닫는다.
            //conn.close(); //더이상 접속이 필요없을때 닫는다.
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    private static void m4() {
        //다중값 반환
        //- N행 1열
        //- 다중 레코드
        DBUtil util = new DBUtil();
        Connection conn = null;
        Statement stat = null;
        ResultSet rs = null;
        
        try {
            
            conn = util.open();
            stat = conn.createStatement();
            
            String sql = "select name from tblAddress order by name";
         
            //결과셋의 참조(+커서)
            rs = stat.executeQuery(sql);

            rs.next();
            String name = rs.getString("name");
            System.out.println(name);
            System.out.println(name);
            System.out.println(rs.getString("name"));
            
            rs.next();
            System.out.println(rs.getString("name"));
            System.out.println("------------");
            
            while (rs.next()) {
                name = rs.getString("name");
                System.out.println(name);
            }
            //커서는 한개이니 커서가 움직인 위치를 확인해야한다!!
            //커서의 움직임은 누적이된다.
            
//            System.out.println("------------");
//            rs.next();//java.sql.SQLException: 마지막 행 다음의 결과 집합 => EOF
//            System.out.println(rs.getString("name"));
            
            stat.close();
            conn.close();
            rs.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    private static void m3() {
        //다중값 반환
        // - 1행 1열
        DBUtil util = new DBUtil();
        Connection conn = null;
        Statement stat = null;
        ResultSet rs = null;
        
        try {
            conn = util.open();
            stat = conn.createStatement();
            
            String sql = "select * from tblAddress where seq = 1";
            
            rs = stat.executeQuery(sql);
            
            //java.sql.SQLException: 부적합한 열 이름
            //java.sql.SQLException: 마지막 행 다음의 결과 집합
            
            //
            
            if (rs.next()) {
                
                String name = rs.getString("name");
                String age = rs.getString("age");                
                String address = rs.getString("address");
                
                System.out.println(name);
                System.out.println(age);
                System.out.println(address);
                
            } else {
                System.out.println("not found");
            }
            
            rs.close();
            stat.close();
            conn.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    private static void m2() {
        DBUtil util = new DBUtil();
        Connection conn = null;
        Statement stat = null;
        ResultSet rs = null;
        
        try {
            
            conn = util.open();
            stat = conn.createStatement();
            
            String sql = "select name from tblAddress where seq = 1";
            
            rs = stat.executeQuery(sql);//BOF
            
            //rs.getInt(1);//제로베이스가 아님, 인덱스가 1부터 시작
            
            if (rs.next()) {; //** 문제 발생 가능
            
                //java.sql.SQLException: 마지막 행 다음의 결과 집합
                //EOF로 넘어감
                String name = rs.getString("name");//문제 발생
            
                System.out.println(name);
            } else {
                System.out.println("데이터 없음");
            }
            
            rs.close();
            stat.close();
            conn.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void m1() {
        
        //단일값 반환
        //- 1행 1열
        DBUtil util = new DBUtil();
        Connection conn = null;
        Statement stat = null;
        ResultSet rs = null;
        
        try {
            
            conn = util.open();
            stat = conn.createStatement();
            
            String sql = "select count(*) as cnt from tblAddress";
            
            //결과셋의 참조 객체(rs)
            //return값이 resultSet
            //커서 개념
            rs = stat.executeQuery(sql);//BOF
            
            rs.getInt(0);//제로베이스가 아님, 인덱스가 1부터 시작
            
            rs.next(); //커서 레코드 1줄 전진
            
            //현재 커서가 가르키고 있는 레코드의 원하는 컬럼 가져오기
            //- rs.getXXX()
            
            //int count = rs.getInt(1);//컬럼순서
            //int count = rs.getInt("cnt");//컬럼명(***)
            String count = rs.getString("cnt");
            
            System.out.println(count);
            
            rs.close();
            stat.close();
            conn.close();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
